#!/bin/bash

##
## Testing of dd_rhelp binary
##

#!- Library include
. /etc/shlib
#!- 

include shunit

depends sed grep cat cut tr head touch wc bc dd which dd_rescue diff

export -f matches
export grep

tmp=/tmp

export PATH=".:$PATH"

##
## Convenience function
##

function init_test() {

    test -e "temp1"

    temp1="$tmp/${tprog}_test.$$.a.tmp"
    temp2="$tmp/${tprog}_test.$$.b.tmp"

    tempdir="$tmp/${tprog}_test.$$.dir"

    Wrap -q -d "Setting up (creating $temp2)" <<EOF

    [ -e "$temp1" ] && rm "$temp1"
    [ -e "$temp2" ] && rm "$temp2"

    "$dd" if="/dev/zero" of="$temp2" count=1 bs=1k >/dev/null 2>&1

EOF

    Elt using "$temp1, $temp2"; Feed
}

function tear_test() {

    Wrap -q -d "Tearing down" <<EOF

    (! [ -e "$temp1" ] || rm "$temp1" ) &&

    (! [ -e "$temp2" ] || rm "$temp2" ) &&

    (! [ -e "$temp1.log" ] || rm "$temp1.log")

EOF

}

function init_mock () {

    test -z "$1" && print_syntax_error "missing first arg for init_mock function."

    # sets id of mock =
    mock_dir="test/mock"
    dd_rescue_path="$mock_dir/$1/dd_rescue"
    oracle_path="$mock_dir/$1/oracle"
    log_path="$mock_dir/$1/sample.log"

    test -z "$mock_id" || print_error "mock test '$mock_id' wasn't teared down."
    test -e "$dd_rescue_path" || print_error "'$dd_rescue_path' does not exists."
    test -e "$oracle_path" || print_error "'$oracle_path' does not exists."
    test -e "$log_path" || print_error "'$log_path' does not exists."


    Section "Mock test: $1"


    init_test
    Elt Copy mock dd_rescue to curdir
    mkdir -p "$tempdir" &&
    cp "$dd_rescue_path" "$tempdir/dd_rescue" &&
    chmod +x "$tempdir/dd_rescue"
    Feedback

    Elt Copy current dd_rhelp to curdir
    cp "./$tprog" "$tempdir/$tprog" &&
    chmod +x "$tempdir/$tprog"
    Feedback

    Elt Copy mock log to curdir
    cp "test/mock/$1/sample.log" "$temp1.log" &&
    cd "$tempdir"
    Feedback

    Elt Creating mock source file
    touch "$temp2"
    Feedback

    mock_id="$1"


}

function tear_mock() {

    test -z "$mock_id" && print_error "no mock test was registered to be teared down."

    Elt Tearing Down tests
    rm -f "$tempdir/dd_rescue" "$temp1.old" "$tempdir/$tprog" && cd "$OLDPWD"
    Feedback

    mock_id=""
    tear_test

}

##
## Tests
##

##
# Checking bad arguments
function test_args {

    assert_list <<EOF

### Bad Arguments

# were tested by commenting print_error, print_usage

## -- call of '$tprog' with 1 empty arg fails (usage)

! ./$tprog ''                                &&
  ./$tprog '' 2>&1 | "$grep" "^usage:"

## -- $tprog with 2 empty arg fails (error)

! ./$tprog '' ''                             &&
  ./$tprog '' '' 2>&1 | "$grep" "error"

## -- $tprog with 3 empty arg fails (error)

! ./$tprog '' '' ''                          &&
  ./$tprog '' '' '' 2>&1 | "$grep" "error"

EOF

}


# were tested by commenting print_error
function test_args_words () {

    init_test

    assert "$tprog arg1 is not specified, but arg2 is, generates 'error:'." 	! ./$tprog \"\" "$temp2" 		\&\& ./$tprog \"\" "$temp2" 		"2>&1" \| "$grep" -i "error"
    assert "$tprog arg1 is not existant, but arg2 is, generates 'error:'." 		! ./$tprog "$temp1" "$temp2" 	\&\& ./$tprog "$temp1" "$temp2" 	"2>&1" \| "$grep" -i "error"
    assert "$tprog arg1 does exists, but arg2 doesn't, generates 'error:'." 	! ./$tprog "$temp2" \"\" 		\&\& ./$tprog "$temp2" \"\" 		"2>&1" \| "$grep" -i "error"

    tear_test
}


##
# Finds dd_rescue ?
#
function test_find () {

    Section dd_rescue finding

    init_test

    Elt Creating $tempdir
    mkdir -p "$tempdir" &&
    cp $tprog $tempdir &&
    cd $tempdir
# && PATH_OLD=$PATH && PATH="" && export PATH
    Feedback


    if [ -z "$(which dd_rescue)" ]; then

# were tested by changing 'not found' to 'not found'
	assert_list <<EOF

## -- errorlevel != 0 if no dd_rescue found

! ./$tprog "$temp2" "$temp1"

## -- no dd_rescue in path ('..not found ..')

./$tprog "$temp2" "$temp1" 2>&1 | "$grep" -i "not found"

## -- no dd_rescue in path ('..dd_rescue..')

./$tprog "$temp2" "$temp1" 2>&1 | "$grep" -i "dd_rescue"

## -- no dd_rescue in path ('..path..')

./$tprog "$temp2" "$temp1" 2>&1 | "$grep" -i "path"

EOF

	Elt Creating dummy dd_rescue in curdir
	echo "#!/bin/bash "> $tempdir/dd_rescue &&
	echo "echo dd_rescue Version 1.02" >> $tempdir/dd_rescue &&
	chmod +x $tempdir/dd_rescue
	Feedback

	assert "dd_rescue in cur dir" ! ./$tprog "$temp2" "$temp1" \&\& ./$tprog "$temp2" "$temp1" "2>&1" \| "$grep" -i \"version\"
	assert "dd_rescue in cur dir" ! ./$tprog "$temp2" "$temp1" \&\& ./$tprog "$temp2" "$temp1" "2>&1" \| "$grep" -i \"dd_rescue\"

	Elt 'Creating dummy dd_rescue (v1.03)'
	echo "#!/bin/bash "> $tempdir/dd_rescue &&
	echo "echo dd_rescue Version 1.03" >> $tempdir/dd_rescue &&
	chmod +x $tempdir/dd_rescue
	Feedback


	assert "dd_rescue in cur dir" ! ./$tprog "$temp2" "$temp1" \&\& ./$tprog "$temp2" "$temp1" "2>&1" \| "$grep" -i \"error.*summary\"

	Elt 'Creating dummy dd_rescue (v1.11)'
	echo "#!/bin/bash "> $tempdir/dd_rescue &&
	echo "echo dd_rescue Version 1.11" >> $tempdir/dd_rescue &&
	chmod +x $tempdir/dd_rescue
	Feedback

	assert "dd_rescue in cur dir" ! ./$tprog "$temp2" "$temp1" \&\& ./$tprog "$temp2" "$temp1" "2>&1" \| "$grep" -i \"error.*summary\"

	Wrap -d "Deleting dummy dd_rescue" rm "$tempdir/dd_rescue"

    else

	print_warning "skipping some dd_rescue finding tests ! Because you have a 'dd_rescue' executable in your path."

	Elt 'Creating dummy dd_rescue (v1.11)'
	echo "#!/bin/bash "> "$tempdir/dd_rescue" &&
	echo "echo dd_rescue Version 1.11" >> "$tempdir/dd_rescue" &&
	chmod +x "$tempdir/dd_rescue"
	Feedback

	assert_list <<EOF

## -- dd_rescue version is searched in "./" first

DEBUG=on ONCE=yes "./$tprog" "$temp2" "$temp1" 2>&1 | "$grep" -i "^- dd_rescue location: './dd_rescue'"

EOF

	Wrap -d "Deleting dummy dd_rescue" rm "$tempdir/dd_rescue"

    fi

    tear_test
}


function test_f_chunkize_badblocks () {

    Section basic test on functions

    assert_list <<EOF

## -- chunksize_badblocks test

# loadfunc
TESTFUNC=yes DEBUG=on ONCE=yes coef=0.5 . ./$tprog "$temp2" "$temp1"
a="\$(echo "0
1
4
8
10
11
12
13
14
16" | chunkize_badblocks )"
echo "a: " \$a
test "\$a" == "0-1
4-4
8-8
10-14
16-16"

EOF
}


function test_run () {
    Section Running Tests

    init_test
    export DEBUG="on"
    assert "$tprog arg1 arg2 works fine with arg1 existing." ./$tprog "$temp2" "$temp1"
    assert "contents should be equal" diff "$temp2" "$temp1"
    tear_test

}


function test_mock_summary () {

    init_mock summary

#echo cd $PWD
#echo DEBUG=on ONCE=yes coef=0.5 ./$tprog "$temp2" "$temp1"
#exit 1;

    assert_list <<EOF

## -- dd_rescue should run without error

DEBUG=on ONCE=yes coef=0.5 ./$tprog "$temp2" "$temp1"
test "\$?" == "128" # once mode eject a 128 errorlevel

## -- logfile should have been modified

test -e "$OLDPWD/$log_path" -a -e "$temp1.log" &&
! "$diff" "$OLDPWD/$log_path" "$temp1.log"

## -- compare last 3 line to canonical run.

test "\$("$tail" -n 3 "$temp1.log")" == "$("$cat" "$OLDPWD/$oracle_path")"

EOF

    tear_mock
}


function test_mock_einval() {

    init_mock einval

    assert_list <<EOF

## -- dd_rescue should run flawlessly

DEBUG=on TWICE=yes coef=0.3 ./$tprog "$temp2" "$temp1"
test "\$?" == "128" # once mode eject a 128 errorlevel

## -- logfile should have been modified

test -e "$OLDPWD/$log_path" -a -e "$temp1.log" &&
! "$diff" "$OLDPWD/$log_path" "$temp1.log"

## -- compare chunk line before last one to canonical run

a="\$(cat "$temp1.log" | grep "^chunk:" | tail -n 2 | head -n 1)"
b="$(cat "$OLDPWD/$oracle_path" | grep "^chunk:")"
echo "a == b ?"
echo "A:" \$a
echo "B:" \$b
test "\$a" == "\$b"

## -- compare last chunk line to canonical run.

a="\$(cat "$temp1.log" | grep "^chunk:" | tail -n 1 )"
b="$(cat "$OLDPWD/$oracle_path"2 | grep "^chunk:")"
echo "a == b ?"
echo "A:" \$a
echo "B:" \$b
test "\$a" == "\$b"


EOF

    tear_mock

}


function test_mock_eof {

    init_mock eof

assert_list <<EOF

## -- dd_rescue should run flawlessly

DEBUG=on ONCE=yes coef=0.3 ./$tprog "$temp2" "$temp1"
test "\$?" == "128" # once mode eject a 128 errorlevel

## -- logfile should have been modified

test -e "$OLDPWD/$log_path" -a -e "$temp1.log" &&
! "$diff" "$OLDPWD/$log_path" "$temp1.log"

## -- compare chunk line before last one to canonical run

a="\$(cat "$temp1.log" | grep "^chunk:" | tail -n 1)"
b="$(cat "$OLDPWD/$oracle_path" | grep "^chunk:")"
echo "a == b ?"
echo "A:" \$a
echo "B:" \$b
test "\$a" == "\$b"

EOF

tear_mock


}


function test_mock_ending {

    init_mock ending

#echo cd $PWD
#echo DEBUG=on ONCE=yes coef=0.3 ./$tprog "$temp2" "$temp1"
#exit 1;

assert_list <<EOF

## -- dd_rescue should run flawlessly

DEBUG=on ONCE=yes coef=0.3 ./$tprog "$temp2" "$temp1"
test "\$?" == "128" # once mode eject a 128 errorlevel

## -- logfile should have been modified

test -e "$OLDPWD/$log_path" -a -e "$temp1.log" &&
! "$diff" "$OLDPWD/$log_path" "$temp1.log"

## -- compare last chunk line to canonical run.

a="\$(cat "$temp1.log" | grep "^chunk:" | tail -n 1 )"
b="$(cat "$OLDPWD/$oracle_path" | grep "^chunk:")"
echo "a == b ?"
echo "A:" \$a
echo "B:" \$b
test "\$a" == "\$b"


EOF
     tear_mock


     init_mock ending

assert_list <<EOF

## -- dd_rescue should run flawlessly in both direction

DEBUG=on TWICE=yes coef=0.3 ./$tprog "$temp2" "$temp1"
test "\$?" == "128" # once mode eject a 128 errorlevel

## -- logfile should have been modified

test -e "$OLDPWD/$log_path" -a -e "$temp1.log" &&
! "$diff" "$OLDPWD/$log_path" "$temp1.log"

## -- compare last chunk line to canonical run.

a="\$(cat "$temp1.log" | grep "^chunk:" | tail -n 1 )"
b="$(cat "$OLDPWD/$oracle_path" | grep "^chunk:")"
echo "a == b ?"
echo "A:" \$a
echo "B:" \$b
test "\$a" == "\$b"


EOF

     tear_mock

}

function sparse_file_test() {

    test -z "$1" && print_syntax_error "missing first arg (sparse file) for sparse_file_test function."
    test -z "$2" && print_syntax_error "missing second arg (complete file) for sparse_file_test function."

    dst=$1
    src=$2

    fixture_dir="test/fixture"

    test -e "$fixture_dir" || print_error "fixture directory $fixture_dir not found."

    temp1="$tmp/${tprog}_test.$$.a.tmp"
    temp2="$tmp/${tprog}_test.$$.b.tmp"

    Section "Finishing $src --> $dst"
    Wrap -d "Setting up test" <<EOF

    cp "$fixture_dir/$src" "$temp2" &&
    cp "$fixture_dir/$dst" "$temp1" &&
    cp "$fixture_dir/$dst.log" "$temp1.log"

EOF

    assert_list <<EOF

## -- dd_rescue should run flawlessly

DEBUG=on coef=0.3 ./$tprog "$temp2" "$temp1"

## -- src and dst files should be the same

"$diff" "$temp1" "$temp2"

EOF

    #cat "$temp1.log"

    tear_test


}


function test_precise_boundary {

    sparse_file_test 12____789.dat 123456789.dat
    sparse_file_test 12____7_9.dat 123456789.dat

}


testbench $*
